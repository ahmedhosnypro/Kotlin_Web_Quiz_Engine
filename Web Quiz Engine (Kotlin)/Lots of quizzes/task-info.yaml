type: edu
files:
- name: src/engine/WebQuizEngine.kt
  visible: true
  text: |
    package engine

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication

    @SpringBootApplication
    class WebQuizEngine{

    }

    fun main(args: Array<String>) {
        runApplication<WebQuizEngine>(*args)
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.jackson.serialization.INDENT_OUTPUT=true

    server.address=0.0.0.0

    #server.error.include-message=always
    #spring.jpa.show-sql=true
    #spring.jpa.properties.hibernate.format_sql=true
    #logging.level.root=Debug
    #logging.level.org.hibernate.SQL=Debug
    #logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

    spring.jpa.hibernate.ddl-auto=update
    #h2
    spring.h2.console.enabled=true
    spring.h2.console.path=/h2
    spring.datasource.url=jdbc:h2:file:../quiz_db
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=
    #
    #postgresql
    #spring.datasource.url=jdbc:postgresql://localhost:5332/quiz

    #spring.datasource.url=jdbc:postgresql://localhost:5332/quiz_test
    #spring.datasource.username=postgres
    #spring.datasource.password=postgres
    #spring.datasource.driver-class-name=org.postgresql.Driver
    #spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
            classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
            classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        //modelmapper
        implementation 'org.modelmapper:modelmapper:2.3.5'
        //database
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'org.postgresql:postgresql'
        //validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
        implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
        implementation 'org.eclipse.persistence:javax.persistence:2.2.1'
        implementation 'javax.validation:validation-api:2.0.1.Final'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = "$hs.kotlin.javaVersion"
        }
    }
  learner_created: false
- name: src/engine/model/Quiz.kt
  visible: true
  text: |-
    package engine.model

    import jakarta.persistence.*


    @Entity
    class Quiz(
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = "id", nullable = false) var id: Long? = null,
        @Column(name = "title", nullable = false) var title: String? = null,
        @Column(name = "text", nullable = false) var text: String? = null,

        @ElementCollection
        @CollectionTable(name = "options", joinColumns = [JoinColumn(name = "id")])
        @Column(name = "options", nullable = false) var options: MutableList<String>? = null,

        @ElementCollection
        @CollectionTable(name = "answer", joinColumns = [JoinColumn(name = "id")])
        @Column(name = "answer")
        var answer: MutableList<Int>? = null
    )
  learner_created: false
- name: src/engine/dto/QuizDTO.kt
  visible: true
  text: |-
    package engine.dto

    class QuizDTO(
        var title: String? = null,
        var text: String? = null,
        var options: List<String>? = null
    )
  learner_created: false
- name: src/engine/repository/QuizRepository.kt
  visible: true
  text: |-
    package engine.repository

    import engine.model.Quiz
    import org.springframework.data.jpa.repository.JpaRepository
    import org.springframework.stereotype.Repository

    @Repository
    interface QuizRepository: JpaRepository<Quiz, Long>
  learner_created: false
- name: src/engine/service/QuizService.kt
  visible: true
  text: |-
    package engine.service

    import engine.model.Quiz
    import engine.repository.QuizRepository
    import org.springframework.stereotype.Service

    @Service
    class QuizService (
        private val quizRepository: QuizRepository
    ){
        fun save(quiz: Quiz) = quizRepository.save(quiz)
        fun findById(id: Long): Quiz? = quizRepository.findById(id).orElse(null)
    }
  learner_created: false
- name: src/engine/SetupDataLoader.kt
  visible: true
  text: |-
    package engine

    import com.fasterxml.jackson.databind.ObjectMapper
    import engine.model.Quiz
    import engine.service.QuizService
    import org.springframework.context.ApplicationListener
    import org.springframework.context.event.ContextRefreshedEvent
    import org.springframework.stereotype.Component
    import org.springframework.transaction.annotation.Transactional

    @Component
    class SetupDataLoader(
        private val quizService: QuizService
    ) : ApplicationListener<ContextRefreshedEvent> {
        private var alreadySetup = false

        @Transactional
        override fun onApplicationEvent(event: ContextRefreshedEvent) {
            if (alreadySetup) return
            val quiz = ObjectMapper().readValue(
                """
                {
                  "title": "The Java Logo",
                  "text": "What is depicted on the Java logo?",
                  "options": ["Robot","Tea leaf","Cup of coffee","Bug"],
                  "answer": [2]
                }
                """.trimIndent(), Quiz::class.java
            )
            quizService.save(quiz)
            alreadySetup = true
        }
    }
  learner_created: false
- name: src/engine/model/AnswerDTO.kt
  visible: true
  text: |-
    package engine.model

    class AnswerDTO(
        var success: Boolean = false,
        var feedback: String = "Wrong answer! Please, try again."
    )
  learner_created: false
- name: test/WebQuizEngineTest.java
  visible: false
  text: |
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static int quizId1 = 0;
        private static int quizId2 = 0;

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\",\n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": 2\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": 1\n" +
                "}";

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[]{
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizId1, "0", false),
            () -> checkQuizSuccess(quizId1, "1", false),
            () -> checkQuizSuccess(quizId1, "2", true),
            () -> checkQuizSuccess(quizId1, "3", false),

            () -> checkQuizSuccess(quizId2, "0", false),
            () -> checkQuizSuccess(quizId2, "1", true),
            () -> checkQuizSuccess(quizId2, "2", false),
            () -> checkQuizSuccess(quizId2, "3", false),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizNum == 1 ? quiz1 : quiz2).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        if (quizNum == 1) {
                            quizId1 = i;
                        } else {
                            quizId2 = i;
                        }
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;
            String quiz = quizNum == 1 ? quiz1 : quiz2;

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;

            String url = "/api/quizzes/" + (quizId + 125);

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, Map.of("answer", answerSent));
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString(s -> !s.isBlank(), "should not be blank"))
            );

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/dto/NewQuizDTO.kt
  visible: true
  learner_created: true
- name: src/engine/controller/QuizzesController.kt
  visible: true
  text: |-
    package engine.controller

    import engine.model.AnswerDTO
    import engine.service.QuizService
    import org.springframework.http.ResponseEntity
    import org.springframework.validation.annotation.Validated
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestMapping
    import org.springframework.web.bind.annotation.RequestParam
    import org.springframework.web.bind.annotation.RestController
    import javax.validation.constraints.NotNull
    import javax.validation.constraints.PositiveOrZero


    @RestController
    @Validated
    @RequestMapping("/api/quiz")
    class QuizController (
        private val quizService: QuizService
    ){
        @GetMapping("")
        fun getQuiz(): ResponseEntity<Any>{
            return ResponseEntity.ok().body(quizService.findById(1))
        }

        @PostMapping("")
        fun solve(@RequestParam @NotNull @PositiveOrZero answer: Int): ResponseEntity<Any>{
            if (answer == 2){
                return ResponseEntity.ok().body(AnswerDTO(true, "Congratulations, you're right!"))
            }
            return ResponseEntity.ok().body(AnswerDTO())
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/316/stages/1774/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 20 Jul 2023 14:22:56 UTC"
record: 2
